// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  patient
  doctor
}

model User {
  id                   String         @id @default(cuid())
  name                 String?
  email                String?        @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  role                 Role           @default(patient)
  isActive             Boolean        @default(true)
  phone                String?        @unique
  stripeCustomerId     String?        @unique
  stripeSubscriptionId String?
  // Relationships
  doctorProfile        DoctorProfile? // If user is a doctor
  accounts             Account[]
  doctorAppointments   Appointment[]  @relation("doctorAppointments")
  patientAppointments  Appointment[]  @relation("patientAppointments")
  givenRatings         DoctorRating[] // Ratings given by this user as a patient
}

model DoctorProfile {
  id                 String      @id @default(cuid())
  licenseNumber      String?     @unique
  experience         String?
  graduationYear     String?     // Validated to be a number between 1950 and 2025 with zod
  education          String?
  description        String?
  clientExpectations String?
  treatmentMethods   String?
  strengths          String?
  specialties        Specialty[]
  isVerified         Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  user               User                @relation(fields: [userId], references: [id])
  userId             String              @unique
  availabilities     DoctorAvailability[]
  receivedRatings    DoctorRating[]      // Ratings received by this doctor
}

model Specialty {
  id      String          @id @default(cuid())
  name    String          @unique
  doctors DoctorProfile[]
}

model Product {
  stripeId     String        @id
  name         String        @unique
  description  String
  price        Int
  priceId      String        @unique
  isArchived   Boolean       @default(false)
  time         String
  image        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
}

enum AppointmentStatus {
  confirmed
  cancelled
  completed
}

model Appointment {
  id              String            @id @default(cuid())
  status          AppointmentStatus @default(confirmed)
  dateTime        DateTime
  notes           String?
  doctorId        String
  patientId       String
  stripeSessionId String            @unique //From which stripe session this appointment was created
  productId       String                    // Stripe product id
  isPaid          Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  product         Product           @relation(fields: [productId], references: [stripeId])
  doctor          User              @relation("doctorAppointments", fields: [doctorId], references: [id])
  patient         User              @relation("patientAppointments", fields: [patientId], references: [stripeCustomerId])

  @@index([dateTime])
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model DoctorAvailability {
  id            String        @id @default(cuid())
  doctorProfile DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId      String
  weekDay       WeekDay
  startTime     DateTime      @db.Time // Store only time part
  endTime       DateTime      @db.Time // Store only time part
  isAvailable   Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([doctorId, weekDay, startTime, endTime])
  @@index([weekDay])
  @@index([doctorId, weekDay])
}


model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model passwordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model doctorRegisterToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model DoctorRating {
  id          String        @id @default(cuid())
  rating      Int           @db.SmallInt // 1-5 stars
  comment     String?       @db.Text     // Optional comment
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  doctorProfile DoctorProfile @relation(fields: [doctorProfileId], references: [id], onDelete: Cascade)
  doctorProfileId String
  patient      User          @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId    String
  
  // Ensure a patient can only rate a doctor once
  @@unique([patientId, doctorProfileId])
  
  // Indexes for performance
  @@index([doctorProfileId])
  @@index([patientId])
}

